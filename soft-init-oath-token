#! /usr/bin/python
#
# Copyright (c) 2011, 2012 Yubico AB
# Copyright (c) 2018 StoredSafe AB
# See the file COPYING for licence statement.
"""
This is a tool to provision the validation server with a SQLLite3 database
Its based on yubicos yhsm init oath token however this is meant to be
run without any HSM, yet providing similar behaviour and functionallity
"""

import sys
import struct
import sqlite3
import argparse
sys.path.append('Lib')

default_db_file = "/var/oath/oath.db"

def parse_args():
    """
    Parse the command line arguments
    """

    parser = argparse.ArgumentParser(description='Initialize OATH token for use with soft-validation-server',
                                     add_help=True,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,)
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='store_true', default=False,
                        help='Enable verbose operation',)
    parser.add_argument('--debug',
                        dest='debug',
                        action='store_true', default=False,
                        help='Enable debug operation',)
    parser.add_argument('--force',
                        dest='force',
                        action='store_true', default=False,
                        help='Overwrite any present entry',)
    parser.add_argument('--uid',
                        dest='uid',
                        required=True,
                        help='User ID',
                        metavar='STR',)
    parser.add_argument('--oath-c',
                        dest='oath_c',
                        required=False,
                        default=0,
                        help='Initial OATH counter value',
                        metavar='INT',)
    parser.add_argument('--test-oath-window',
                        dest='look_ahead',
                        required=False,
                        default=10,
                        help='Number of codes to search with --test-code',
                        metavar='INT',)
    parser.add_argument('--test-code',
                        dest='test_code',
                        type=int, required=False,
                        help='Optional OTP from token for verification',
                        metavar='INT',)
    parser.add_argument('--oath-k',
                        dest='oath_k',
                        required=False,
                        help='The secret key of the token, hex encoded',
                        metavar='HEXSTR',)
    parser.add_argument('--db-file',
                        dest='db_file',
                        default=default_db_file,
                        required=False,
                        help='DB file for storing --oath secrets in the validation-server',
                        metavar='FN',)

    args = parser.parse_args()
    return args

def get_oath_k(args):
    """ Get the OATH K value (secret key), either from args or by prompting. """
    if args.oath_k:
        decoded = args.oath_k.decode('hex')
    else:
        t = raw_input("Enter OATH key (hex encoded) : ")
        decoded = t.decode('hex')
    if len(decoded) != 20:
        sys.stderr.write("Supplied OATH key is not 20 bytes (%i).\n" % (len(decoded)))
        sys.exit(1)
    return decoded

class ValOathDb():
    """ Provides access to database with secrets and other information. """

    def __init__(self, filename):
        self.filename = filename
        self.conn = sqlite3.connect(self.filename)

        self.create_table()

    def create_table(self):
        c = self.conn.cursor()
        c.execute("CREATE TABLE IF NOT EXISTS oath " \
                      "(key TEXT PRIMARY KEY, secret TEXT, oath_C INTEGER, oath_T INTEGER)")

    def add(self, entry):
        """ Add entry to database. """
        c = self.conn.cursor()
        c.execute("INSERT INTO oath (key, secret, oath_C, oath_T) VALUES (?, ?, ?, ?)",
                  (entry.data["key"], \
                       entry.data["secret"], \
                       entry.data["oath_C"], \
                       entry.data["oath_T"],))
        self.conn.commit()
        return c.rowcount == 1

    def delete(self, entry):
        """ Delete entry from database. """
        c = self.conn.cursor()
        c.execute("DELETE FROM oath WHERE key = ?", (entry.data["key"],))

class ValOathEntry():
    """ Class to hold a row of ValOathDb. """
    def __init__(self, row):
        if row:
            self.data = row

def store_oath_entry(args, secret, oath_c):
    """ Store the secret in the database. """
    data = {"key": args.uid,
            "secret": secret.encode('hex'),
            "oath_C": oath_c,
            "oath_T": None,
            }
    entry = ValOathEntry(data)
    db = ValOathDb(args.db_file)
    try:
        if args.force:
            db.delete(entry)
        db.add(entry)
    except sqlite3.IntegrityError, e:
        sys.stderr.write("ERROR: %s\n" % (e))
        return False
    return True

def read_secret(args):
    """ Get the secret """
    key = get_oath_k(args)
    return key

def main():
    args = parse_args()

    #nonce = 'nounce_a'
    secret = read_secret(args)
    #oath_c = validate_oath_c(hsm, args, nonce, aead)
    return store_oath_entry(args, secret, args.oath_c)

if __name__ == '__main__':
    if main():
        sys.exit(0)
    sys.exit(1)
